package cn.egame.common.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import cn.egame.common.util.Utils;

public class RankListBase<T1, T2, T3> implements java.io.Serializable {
	private byte[] SyncRoot = new byte[1];
	private boolean isUniq = false;

	public boolean isUniq() {
		return isUniq;
	}

	public void setUniq(boolean isUniq) {
		this.isUniq = isUniq;
		if (this.isUniq) {
			uniq();
		} else
			map.clear();
	}

	protected List<RankBase<T1, T2, T3>> list = new ArrayList<RankBase<T1, T2, T3>>();
	protected Map<T1, RankBase<T1, T2, T3>> map = new HashMap<T1, RankBase<T1, T2, T3>>();

	public RankListBase() {

	}

	public RankListBase(boolean uniq) {
		this.isUniq = uniq;
	}

	public void sort() {
		synchronized (SyncRoot) {
			List<RankBase<T1, T2, T3>> temp = new ArrayList<RankBase<T1, T2, T3>>();
			for (RankBase<T1, T2, T3> item : list) {
				int index = this.rankScore(temp, item.getScore());
				if (index >= 0)
					list.add(index, item);
				else
					list.add(item);
			}
			list = temp;
		}
	}

	public int rankScore(List<RankBase<T1, T2, T3>> l, T2 score) {

		if (l.size() < 1)
			return 0;

		long sc = Utils.toLong(score, 0);
		RankBase<T1, T2, T3> item = (RankBase<T1, T2, T3>) l.get(0);
		if (sc >= Utils.toLong(item.getScore(), 0))
			return 0;

		item = (RankBase<T1, T2, T3>) l.get(list.size() - 1);
		if (Utils.toLong(item.getScore(), 0) > sc)
			return -1;

		long s = 0L;
		int left = 0, right = list.size(), mid = (left + right) / 2;
		for (; mid >= left && mid <= right; mid = (left + right) / 2) {
			if (left - right <= 1)
				break;

			item = l.get(mid);
			s = Utils.toLong(item.getScore(), 0);
			if (sc >= s)
				right = mid;
			else
				left = mid;
		}

		return mid;
	}

	private void uniq() {
		for (int i = list.size(); i >= 0; i--) {
			RankBase b = (RankBase) list.get(i);
			if (!map.containsKey(b.getId())) {
				this.add(b);
			}
		}
	}

	public RankBase get(T1 id) {
		if (isUniq)
			return map.get(id);

		for (RankBase item : list)
			return item;

		return null;
	}

	public int indexOf(RankBase o) {
		return list.indexOf(o);
	}

	public int size() {
		return list.size();
	}

	public boolean isEmpty() {
		return list.isEmpty();
	}

	public boolean contains(RankBase<T1, T2, T3> o) {
		return list.contains(o);
	}

	public boolean contains(T1 id) {
		return map.containsKey(id);
	}

	public Iterator iterator() {
		return list.iterator();
	}

	public void add(RankBase<T1, T2, T3> o) {
		if (o != null) {
			synchronized (SyncRoot) {
				int index = rankScore(list, o.getScore());
				if (isUniq) {
					if (!map.containsKey(o.getId())) {
						map.put(o.getId(), o);
						if (index >= 0)
							list.add(index, o);
						else
							list.add(o);
					}
				} else {
					if (index >= 0)
						list.add(index, o);
					else
						list.add(o);
				}

			}
		}
	}

	public void remove(RankBase<T1, T2, T3> o) {
		if (o != null) {
			synchronized (SyncRoot) {
				if (isUniq) {
					if (!map.containsKey(o.getId())) {
						map.remove(o.getId());
						list.remove(o);
					}
				} else
					list.remove(o);
			}
		}
	}

	public void clear() {
		synchronized (SyncRoot) {
			if (isUniq)
				map.clear();
			list.clear();
		}
	}

}
