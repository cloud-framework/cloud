package cn.egame.common.cache.factory;

import java.io.IOException;
import java.util.Date;

import cn.egame.common.cache.CacheClientBase;
import cn.egame.common.cache.LocalCacheObject;
import cn.egame.common.util.Utils;

import com.danga.MemCached.MemCachedClient;
import com.danga.MemCached.SockIOPool;

public class MemCacheClient extends CacheClientBase {

	public static void main(String[] args) {

		try {

			MemCacheClient c = new MemCacheClient();
			c.setCachePool("192.168.70.12:20002");
			
			c.setBroadcast("224.10.10.10", 801);
			// c.set("test", "ok");
			//c.set("test", 5,120);
			Thread.sleep(2000);
			Object t = c.get("test");

			System.out.println(t);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private MemCachedClient memCached = null;

	public MemCacheClient() {
		super();
	}

	public MemCacheClient(String serverURL, String broadcastAddress,
			int broadcastPort) throws IOException {
		this();
		setCachePool(serverURL);
		setBroadcast(broadcastAddress, broadcastPort);
	}

	@Override
	public Object get(String key) {
		Object obj = null;
		try {
			if ((obj = getLocalCached(key)) == null) {
				if (memCached != null) {
					obj = memCached.get(key);
					if (obj instanceof LocalCacheObject) {
						LocalCacheObject l = (LocalCacheObject) obj;
						if (l.isLocal()) {
							super.setLocalCache(key, obj);
							return l.getObj();
						}
					}

					super.setLocalCache(key, obj);
				} else
					logger.info("get memCached=null");
			}

		} catch (Exception ex) {
			logger.error("get", ex);
		}
		return obj;
	}

	@Override
	public void removeRemote(String key) {
		if (memCached != null) {
			memCached.delete(key);
			super.sendClearKey(key);
		}
	}

	@Override
	public void set(String key, Object obj, int seconds) {
		try {
			if (Utils.stringIsNullOrEmpty(key) || obj == null)
				return;
			LocalCacheObject l = new LocalCacheObject(key, obj,
					Utils.getCurrentTime(), super.localCacheGcThreadTime,
					seconds);
			localCached.put(key, l);
			if (memCached != null) {
				if (l.isLocal())
					memCached.set(key, l, new Date(seconds * 1000));
				else
					memCached.set(key, obj);

				super.sendClearKey(key);
			}
		} catch (Exception ex) {
			logger.error("set memcached:", ex);
		}

	}

	public void setCachePool(String serverURL) {

		logger.info("setMemcachedPool:" + serverURL);

		if (serverURL == null || serverURL.length() < 1)
			return;

		SockIOPool pool = SockIOPool.getInstance();
		// set the servers and the weights
		pool.setServers(new String[] { serverURL });
		// pool.setWeights( weights );

		// set some basic pool settings
		// 5 initial, 5 min, and 250 max conns
		// and set the max idle time for a conn
		// to 30
		pool.setInitConn(5);
		pool.setMinConn(5);
		pool.setMaxConn(500);
		pool.setMaxIdle(1000 * 60 * 30);

		// set the sleep for the maint thread
		// it will wake up every x seconds and
		// maintain the pool size
		pool.setMaintSleep(30);

		// set some TCP settings
		// disable nagle
		// set the read timeout to 3 secs
		// and don't set a connect timeout
		pool.setNagle(false);
		pool.setSocketTO(3000);
		pool.setSocketConnectTO(0);

		// initialize the connection pool
		pool.initialize();

		memCached = new MemCachedClient();
		memCached.setPrimitiveAsString(true);
		memCached.setSanitizeKeys(false);

		// memCached.setCompressEnable(true);
		// memCached.setCompressThreshold(64 * 1024);
	}

	// /*
	// * (non-Javadoc)
	// *
	// * @see
	// *
	// cn.egame.common.cache.ICacheClient#getElementFromQueue(java.lang.String,
	// * int)
	// */
	// @Override
	// public <T> T getTFromList(String k, int index) throws ExceptionCommonBase
	// {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see cn.egame.common.cache.ICacheClient#popFromQueue(java.lang.String,
	// * java.lang.Object, boolean)
	// */
	// @Override
	// public <T> T popTFromList(String k, boolean isPopLeft)
	// throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see cn.egame.common.cache.ICacheClient#pushToQueue(java.lang.String,
	// * java.lang.Object, boolean, int)
	// */
	// @Override
	// public <T> void setT2List(String k, T v, boolean isPushLeft, int seconds)
	// throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see
	// * cn.egame.common.cache.ICacheClient#pushBatchToQueue(java.lang.String,
	// * java.util.List, boolean, int)
	// */
	// @Override
	// public <T> void setBatch2List(String k, List<T> list, boolean isPushLeft,
	// int second) throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see
	// * cn.egame.common.cache.ICacheClient#getLRangeFromQueue(java.lang.String,
	// * int, int)
	// */
	// @Override
	// public <T> List<T> getRangeTFromList(String k, int start, int limit)
	// throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see
	// cn.egame.common.cache.ICacheClient#removeFromQueue(java.lang.String,
	// * java.lang.Object)
	// */
	// @Override
	// public <T> boolean removeFromList(String k, T v) throws
	// ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see
	// cn.egame.common.cache.ICacheClient#getLenthOfQueue(java.lang.String)
	// */
	// @Override
	// public long getLenthOfList(String k) throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// /*
	// * (non-Javadoc)
	// *
	// * @see cn.egame.common.cache.ICacheClient#insertValue(java.lang.String,
	// * java.lang.Object, int)
	// */
	// @Override
	// public <T> void insertValue(String k, T v, int index)
	// throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	// }
	//
	// @Override
	// public <T> void replaceList(String k, List<T> list, boolean isListHead,
	// int second) throws ExceptionCommonBase {
	// throw new ExceptionCommonBase(-1, "MemCached不支持此操作");
	//
	// }

}
